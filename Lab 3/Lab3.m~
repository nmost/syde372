%% SYDE 372 Lab #3: nmost, VicV, ajwootto
clear all
load feat.mat
%1: since our feature is based on the grayscale level of each pixel
%compared to it's orthogonal neighbors, the "noisiest" images are likely to
%be the most confused; cork, cloth, stone, and pigskin

%2: the images with the most regular shapes are easier to separate from
%eachother; the face, paper, and raiffa should be easily distinguishable.

%% Part 3
%{
[f2means, f2covs] = getmeansandcovs(f2);
[f8means, f8covs] = getmeansandcovs(f8);
[f32means, f32covs] = getmeansandcovs(f32);

truef2tclasses = f2t(3,:);
truef8tclasses = f8t(3,:);
truef32tclasses = f32t(3,:);
est_f2tclasses = getclassifications(f2t,f2means,f2covs);
est_f8tclasses = getclassifications(f8t,f8means,f8covs);
est_f32tclasses = getclassifications(f32t,f32means,f32covs);

% UNSEMICOLON THESE TO GET THE CONF MATRIX VALUES
c2 = confusionmat(truef2tclasses, est_f2tclasses);
c8 = confusionmat(truef8tclasses, est_f8tclasses);
c32 = confusionmat(truef32tclasses, est_f32tclasses);

%% Part 4
cimage = zeros(256,256);
for i=1:256
    for j=1:256
        features = [ multf8(i,j,1)
                     multf8(i,j,2) ];
        cimage(i,j) = getmicdclass(features, f8means, f8covs);
    end
end
figure(1)
imagesc(cimage)
figure(2)
imagesc(multim)
%}
%% Part 5
%K = 10;
%easysoln = kmeans(f32(1:2,:)', K); %I'm assuming we can't do this though...
%k_means(f32, K)
K = 10;
k_points = zeros(2, K);
prev_points = zeros(2, K);
classes = zeros(1,length(f32));

for i=1:K
    k_points(1:2, i) = f32(1:2,round(rand()*160));
end
for i=1:length(f32)
    classes(1,i) = getmedclass(f32(1:2,i), k_points, K);
end
while (~isequal(prev_points, k_points))
    prev_points = k_points;
    counts = zeros(1, K);
    for i=1:length(f32)
        classes(1,i) = getmedclass(f32(1:2,i), k_points, K);
    end
    k_points = zeros(2, K);
    for i=1:length(classes)
        k_points(:, classes(i)) = k_points(:, classes(i)) + f32(1:2, i);
        counts(1, classes(i)) =  counts(1, classes(i)) + 1;
    end
    for i=1:length(k_points)
        k_points(:, i) = k_points(:, i) / counts(1, i);
        if (counts(1,i) == 0)
            k_points(:, i) = [0;0];
        end
    end
end

plot_points = zeros(3, K);
for i=1:length(k_points)
  plot_points(:, i) = [k_points(1,i); k_points(2,i); i];
end
figure(3)
plot(plot_points(1,:), plot_points(2,:), '.');
aplot(f32, 'A', 'black');

